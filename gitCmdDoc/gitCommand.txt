Git Command

///////////////////////////////////////////////////////// 分支命名规范 /////////////////////////////////////////////////////////

分支   命名    说明
主分支      master      主分支，所有提供给用户使用的正式版本，都在这个主分支上发布
开发分支    dev         开发分支，永远是功能最新最全的分支
功能分支    feature-*   新功能分支，某个功能点正在开发阶段
发布版本    release-*   发布定期要上线的功能
修复分支    hotfix-*    修复线上代码的 bug

1. 主分支 master
  首先，代码库应该有一个、且仅有一个主分支。所有提供给用户使用的正式版本，都在这个主分支上发布。
  Git 主分支的名字，默认叫做 master 。它是自动建立的，版本库初始化以后，默认就是在主分支在进行开发。

2. 开发分支 dev
  主分支只用来分布重大版本，日常开发应该在另一条分支上完成。我们把开发用的分支，叫做 dev
  这个分支可以用来生成代码的最新隔夜版本（nightly）。如果想正式对外发布，就在 Master 分支上，对 dev 分支进行”合并”（merge）。

  (1) 创建 dev 分支
  git checkout -b dev master

  (2) 将 dev 分支发布到 Master 分支
  git checkout master   // 切换到 dev 分支
  git merge --no-ff dev  // 对 dev 分支进行合并

3. 功能分支 feature
  功能分支的名字，可以采用 feature-* 的形式命名。

  (1) 创建一个功能分支
  git checkout -b feature-xxxxxx dev

  (2) 开发完成后，将功能分支合并到 dev 分支
  git checkout dev
  git merge --no-ff feature-xxxxxx

  (3) 删除 feature 分支
  git branch -d feature-xxxxxx

4. 预发布分支 release
  预发布分支为发布正式版本之前（即合并到 Master 分支之前），我们可能需要有一个预发布的版本进行测试。
  预发布分支是从 dev 分支上面分出来的，预发布结束以后，必须合并进 dev 和 master 分支。它的命名，可以采用 release-* 的形式。

  (1) 创建一个预发布分支
  git checkout -b release-1.2 dev

  (2) 确认没有问题后，合并到 master 分支
  git checkout master
  git merge --no-ff release-1.2

  (3) 对合并生成的新节点，做一个标签
  git tag -a 1.2

  (4) 再合并到 dev 分支
  git checkout dev
  git merge --no-ff release-1.2

  (5) 删除预发布分支
  git branch -d release-1.2

5. 修补 bug 分支
  软件正式发布以后，难免会出现bug。这时就需要创建一个分支，进行bug修补。
  修补 bug 分支是从 Master 分支上面分出来的。修补结束以后，再合并进 master 和 dev 分支。它的命名，可以采用 hotfix-* 的形式。

  (1) 创建一个修补 bug 分支
  git checkout -b hotfix-0.1 master

  (2) 修补结束后，合并到 master 分支
  git checkout master
  git merge --no-ff hotfix-0.1
  git tag -a 0.1.1

  (3) 再合并到 dev 分支
  git checkout dev
  git merge --no-ff hotfix-0.1

  (4) 删除修补分支
  git branch -d hotfix-0.1

6. git tag usage
  (1) 添加标签
  git tag -a V0.1.110811 -m "基本部署完成，有BUG待做"

  (2) 删除标签
  git tag -d V0.1.110811
 
  (3) 推送到远程
  git push origin V0.1.110811
  git push –tags

/////////////////////////////////////////////////////////// 分支操作 //////////////////////////////////////////////////////////

1. 本地分支和远程分支建立追踪关系的三种方式

  1.1 手动建立追踪关系
    git branch --set-upstream-to=<远程主机名>/<远程分支名> <本地分支名>

  1.2 push时建立追踪关系
    加上 -u 参数，这样 push 时，本地指定分支就和远程主机的同名分支建立追踪关系
    git push -u <远程主机名> <本地分支名>

  1.3 新建分支时建立跟踪关系
    git checkout -b <本地分支名> <远程主机名>/<远程分支名>

  1.4 查看追踪关系
    git branch -vv
    Eg:
    (base) dw@dw-MacBookPro:~/CFDEM/CFDEMcoupling-PUBLIC-5.x$ git branch -vv
    * develop-v1.0 3d3f519 [origin/develop-v1.0：领先 1] doc(): add gitCommand.txt and gitCommitFormat.txt
      master       2f4b820 [origin/master] doc(): update test_mix/.gitignore
    // 本地 develop-v1.0 分支领先远程分支 1 个 commit

2. git push
  git push 命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
  一般形式为：git push <远程主机名> <本地分支名>:<远程分支名>  // 注意：这里的 : 前后是必须没有空格

  (1) 如果省略远程分支名，则表示将本地分支推送与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。
    Eg: git push origin develop-v.x.x
    上面命令表示，将本地的 develop-v.x.x 分支推送到 origin 主机的 develop-v.x.x 分支。如果后者不存在，则会被新建。

  (2) 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
    Eg:
    // 删除远程仓库的分支
    git push origin :develop-v.x.x
    // 等价于
    git push origin --delete develop-v.x.x

  (3) 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
    Eg: git push origin

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
