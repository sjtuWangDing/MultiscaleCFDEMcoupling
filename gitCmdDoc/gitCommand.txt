Git Command

///////////////////////////////////////////////////////// 分支命名规范 /////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////// 分支操作 //////////////////////////////////////////////////////////

1. 本地分支和远程分支建立追踪关系的三种方式

  1.1 手动建立追踪关系
    git branch --set-upstream-to=<远程主机名>/<远程分支名> <本地分支名>

  1.2 push时建立追踪关系
    加上-u参数，这样push时，本地指定分支就和远程主机的同名分支建立追踪关系
    git push -u <远程主机名> <本地分支名>

  1.3 新建分支时建立跟踪关系
    git checkout -b <本地分支名> <远程主机名>/<远程分支名>

  1.4 查看追踪关系
    git branch -vv
    Eg:
    (base) dw@dw-MacBookPro:~/CFDEM/CFDEMcoupling-PUBLIC-5.x$ git branch -vv
    * develop-v1.0 3d3f519 [origin/develop-v1.0：领先 1] doc(): add gitCommand.txt and gitCommitFormat.txt
      master       2f4b820 [origin/master] doc(): update test_mix/.gitignore
    // 本地 develop-v1.0 分支领先远程分支 1 个 commit

2. git push
  git push 命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相仿。
  一般形式为：git push <远程主机名> <本地分支名>:<远程分支名>  // 注意：这里的 : 前后是必须没有空格

  (1) 如果省略远程分支名，则表示将本地分支推送与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建。
    Eg: git push origin develop-v.x.x
    上面命令表示，将本地的 develop-v.x.x 分支推送到 origin 主机的 develop-v.x.x 分支。如果后者不存在，则会被新建。

  (2) 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。
    Eg:
    // 删除远程仓库的分支
    git push origin :develop-v.x.x
    // 等价于
    git push origin --delete develop-v.x.x

  (3) 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略。
    Eg: git push origin

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
