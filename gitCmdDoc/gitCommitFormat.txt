git commit message 格式

1. 提交格式
<type>(<scope>): <subject>
<BLANK LINE> // 空一行
<body>
<BLANK LINE> // 空一行
<footer>

type (必需) scope(可选) subject(必需)

其中，Header 是必需的，Body 和 Footer 可以省略。
不管是哪一个部分，任何一行都不得超过100个字符。这是为了避免自动换行影响美观。
	标题行(第一行/header): 必填, 描述主要修改类型和内容
	scope: commit 影响的范围, 比如: route, component, utils, build...
	subject: commit 的概述, 建议符合 50/72 formatting
	主题内容(body): 描述为什么修改, 做了什么样的修改, 以及开发的思路等等, 可以分为多行, 建议符合 50/72 formatting
	页脚注释(footer): 放 Breaking Changes 或 Closed Issues 或修复的 bug 的链接

Eg:
docs(weekly-report): add final-report folder
    
Add project summary folder final-report. The development process and major problems and improvementsof the image classification and detection model will be reflected in the final-report.md file.

(1) type
type用于说明commit的种类，只允许使用下面的标识
	build: 主要目的是修改项目构建系统(例如glup，webpack，rollup的配置等)的提交
	ci:主要目的是修改项目继续完成集成流程(例如Travis，Jenkins，GitLab CI,Circle)的提交
	doc：对应的文档更新
	feat：项目中的新增功能(feature)
	fix： bug修复
	pref：性能优化
	refactor：重构代码(既没有新功能，也没有修复bug)
	style：不影响程序逻辑的代码修改(更加规范，加入空白符，补全分号)
	test：新增测试用例或是更新现有测试
	revert：回滚某个更早之前的提交
	chore： 不属于以上类型的其他类型

(2) scope
scope用于说明commit影响的范围，比如数据层，控制层，视图层等等，视项目的不同而不同

(3) subject
subject是commit内容的尖端描述，不超过50个字符。
义动词开头，使用第一人称现在时，比如change，而不是changed或changes，第一个字母小写。结尾不加英文句号(.)

(4) body
body部分是本次commit的详细描述，可以分成多行

2. commitizen: 替代你的git commit
	通过借助工具commitizen/cz-cli的安装之后，就会产生规范性的提示语句，帮助我们形成规范的commit message
	首先我们需要安装npm，安装环境需要在linux下，我这里是ubuntu18.04。如果是windows需要使用docker容器，将本地的文件映射到容器中。
(1) sudo apt-get install npm
(2) sudo npm install --save-dev commitizen
(3) sudo npm install --save-dev git-cz
(4) 以后，凡是用到git commit命令，一律改为使用git cz。这时，就会出现选项，用来生成符合格式的 Commit message。

3. 使用commitlint工具检验commit格式是否符合规范
	虽然上面安装了commitizen工具，可以使用工具帮助我们生成符合规范的commit message，但是原有的 git commit 命令还是可以正常使用的，我们使用commitlint工具进行commit格式是否符合规范，防止有人继续使用  git commit  操作提交出不规范的信息。

// 安装commitlint cli和传统配置
npm install --save-dev @commitlint/{config-conventional,cli}
// 对于Windows：
npm install --save-dev @commitlint/config-conventional @commitlint/cli

// 配置commitlint使用传统的config配置文件，在项目根目录生成就可以了 
echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js






















